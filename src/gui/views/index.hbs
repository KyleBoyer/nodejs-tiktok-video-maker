<div class="form-container">
    <div id="terminal" style="display:none; width: 100%; height: 100%;"></div>
    <!-- Progress Step Bar -->
    <div class="progress-line-bar">
        <div class="progress-line"></div>
        <div class="step-indicator" id="indicator1">
            <div class="number">1</div>
            <div class="label">Video</div>
        </div>
        <div class="step-indicator" id="indicator2">
            <div class="number">2</div>
            <div class="label">Audio</div>
        </div>
        <div class="step-indicator" id="indicator3">
            <div class="number">3</div>
            <div class="label">Story</div>
        </div>
        <div class="step-indicator" id="indicator4">
            <div class="number">4</div>
            <div class="label">Replacements</div>
        </div>
        <div class="step-indicator" id="indicator5">
            <div class="number">5</div>
            <div class="label">TTS</div>
        </div>
        <div class="step-indicator" id="indicator6">
            <div class="number">6</div>
            <div class="label">Captions</div>
        </div>
        <div class="step-indicator" id="indicator7">
            <div class="number">7</div>
            <div class="label">Cleanup</div>
        </div>
    </div>

    <form id="multiStepForm" method="post">
        <!-- Step 1 -->
        <div class="step" id="step1">
            <h2>Video Configs</h2>
            <p><label style="display: block !important;">Background Video URL:
                <input type="url" name="video.url" placeholder="https://www.youtube.com/watch?v=" pattern="https?://.*" onchange="showBackgroundVideo()" required>
            </label></p>
            <div id="backgroundVideoDiv" style="display:none;text-align:center;"></div>
            <p><label style="display: block !important;">Background Video Speed Percentage:
                <input type="number" name="video.speed" min="1" max="10000" value="100" step="1" required>
            </label></p>
            <p><label style="display: block !important;">Background Video Volume Percentage:
                <input type="number" name="video.volume" min="0" max="100" value="0" step="1" required>
            </label></p>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Background Video Loop:</label><label class="switch">
                <input type="checkbox" name="video.loop" checked />
                <span class="slider round"></span>
            </label></p>
            <p><label style="display: block !important;">Final Video Height:
                <input type="number" name="video.height" min="1" value="1920" step="1" required>
            </label></p>
            <p><label style="display: block !important;">Final Video Width:
                <input type="number" name="video.width" min="1" value="1080" step="1" required>
            </label></p>
            <!-- Advanced Options -->
            <div class="advanced-options-step1" style="display:none;">
                <p><label style="display: block !important;">Background Video Resize Method:
                    <select name="video.resize_method" onchange="toggleResizeMethodDependsOn()">
                        <option value="crop" selected>Crop</option>
                        <option value="scale">Scale</option>
                    </select>
                </label></p>
                <p class="depends-on-crop"><label style="display: block !important;">Background Video Crop Style Width:
                    <select name="video.crop_style_width">
                        <option value="center" selected>Center</option>
                        <option value="left">Left</option>
                        <option value="right">Right</option>
                    </select>
                </label></p>
                <p class="depends-on-crop"><label style="display: block !important;">Background Video Crop Style Height:
                    <select name="video.crop_style_height">
                        <option value="center" selected>Center</option>
                        <option value="top">Top</option>
                        <option value="bottom">Bottom</option>
                    </select>
                </label></p>
                <p class="depends-on-scale" style="display:none;"><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Background Video Scale Pad:</label><label class="switch">
                    <input type="checkbox" name="video.scale_pad" checked />
                    <span class="slider round"></span>
                </label></p>
                <p class="depends-on-scale" style="display:none;"><label style="display: block !important;">Background Video Scale Pad Color:
                    {{!-- <input type="color" name="video.scale_pad_color" value="#000000" required> --}}
                    <div id="scale_pad_color-picker" class="input-group depends-on-scale" style="display:none;">
                        <input name="video.scale_pad_color" type="text" value="#000000" class="form-control input-lg" style="margin-top: 0;" required>
                        <span class="input-group-append">
                            <span class="input-group-text colorpicker-input-addon"><i></i></span>
                        </span>
                    </div>
                </label></p>
                <p><label style="display: block !important;">Background Video Trim Method:
                    <select name="video.trim_method">
                        <option value="random" selected>Random</option>
                        <option value="keep_start">Keep Start</option>
                        <option value="keep_end">Keep End</option>
                    </select>
                </label></p>
                <p><label style="display: block !important;">Final Video Bitrate:
                    <input type="number" name="video.bitrate" min="1" value="25000" placeholder="kB/s" step="1" required>
                </label></p>
                <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Auto-Correct TTS Duration:</label><label class="switch">
                    <input type="checkbox" name="video.autocorrect_tts_duration" checked />
                    <span class="slider round"></span>
                </label></p>
                <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Accurate Render Method:</label><label class="switch">
                    <input type="checkbox" name="video.accurate_render_method" onchange="editAudioBitrate(this)" checked />
                    <span class="slider round"></span>
                </label></p>
                <p><label style="display: block !important;">Final Video Output Format:
                    <select name="video.output_format">
                        <option value="mp4" selected>MP4</option>
                        <option value="webm">WEBM</option>
                    </select>
                </label></p>
            </div>
            <p>
                <button type="button" onclick="toggleAdvancedOptions(this, 'advanced-options-step1')">Show advanced options</button>
            </p>
            <button type="button" onclick="resetForm()">Reset Form</button>
            <button type="button" style="float: right;" onclick="nextStep(2)">Next</button>
        </div>

        <!-- Step 2 -->
        <div class="step" id="step2" style="display: none;">
            <h2>Audio Configs</h2>
            <p><label style="display: block !important;">Background Audio URL:
                <input type="url" name="audio.url" placeholder="https://www.youtube.com/watch?v=" pattern="https?://.*" onchange="showBackgroundAudio()" required>
            </label></p>
            <div id="backgroundAudioDiv" style="display:none;text-align:center;"></div>
            <p><label style="display: block !important;">Background Audio Speed Percentage:
                <input type="number" name="audio.speed" min="1" max="10000" value="100" step="1" required>
            </label></p>
            <p><label style="display: block !important;">Background Audio Volume Percentage:
                <input type="number" name="audio.volume" min="0" max="100" value="15" step="1" required>
            </label></p>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Background Audio Loop:</label><label class="switch">
                <input type="checkbox" name="audio.loop" checked />
                <span class="slider round"></span>
            </label></p>
            <!-- Advanced Options -->
            <div class="advanced-options-step2" style="display:none;">
                <p><label style="display: block !important;">Background Audio Trim Method:
                    <select name="audio.trim_method">
                        <option value="random">Random</option>
                        <option value="keep_start" selected>Keep Start</option>
                        <option value="keep_end">Keep End</option>
                    </select>
                </label></p>
                <p><label style="display: block !important;">Background Audio Bitrate:
                    <select name="audio.bitrate" id="audioBitrate">
                        <option value="320" style="display: none;">320 kB/s</option>
                        <option value="256" selected>256 kB/s</option>
                        <option value="224">224 kB/s</option>
                        <option value="192">192 kB/s</option>
                        <option value="160">160 kB/s</option>
                        <option value="128">128 kB/s</option>
                        <option value="112">112 kB/s</option>
                        <option value="96">96 kB/s</option>
                        <option value="80">80 kB/s</option>
                        <option value="64">64 kB/s</option>
                        <option value="48">48 kB/s</option>
                        <option value="40">40 kB/s</option>
                        <option value="32">32 kB/s</option>
                        <option value="24">24 kB/s</option>
                        <option value="16">16 kB/s</option>
                        <option value="8">8 kB/s</option>
                    </select>
                </label></p>
            </div>
            <p>
                <button type="button" onclick="toggleAdvancedOptions(this, 'advanced-options-step2')">Show advanced options</button>
            </p>
            <button type="button" onclick="previousStep(1)">Previous</button>
            <button type="button" style="float: right;" onclick="nextStep(3)">Next</button>
        </div>

        <!-- Step 3 -->
        <div class="step" id="step3" style="display: none;">
            <h2>Story Configs</h2>
            <p><label style="display: block !important;">Story Source:
                <select id="storySource" name="story.source" onchange="showStorySourceSection(this)">
                    <option value="reddit" selected>Reddit</option>
                    <option value="ai">AI</option>
                </select>
            </label></p>
            <div id="redditSourceSection">
                <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Screenshot Reddit Title:</label><label class="switch">
                    <input type="checkbox" name="story.reddit_screenshot_title" checked onchange="toggleRedditScreenshotConfigs(this)" />
                    <span class="slider round"></span>
                </label></p>
                <div id="redditScreenshotConfigs">
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Title Screenshot Theme:
                        <select name="story.reddit_screenshot_title_theme">
                            <option value="dark" selected>Dark</option>
                            <option value="light">Light</option>
                        </select>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Title Screenshot Zoom:
                        <input type="number" name="story.reddit_screenshot_title_zoom" min="0.1" max="10.0" value="2.0" step="0.1" required>
                    </label></p>
                </div>
                <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Reddit Random Story:</label><label class="switch">
                    <input type="checkbox" name="story.reddit_random" onchange="toggleRedditRandomConfigs(this)" />
                    <span class="slider round"></span>
                </label></p>
                <div id="redditNotRandomConfigs">
                    <p><label style="display: block !important;">Reddit Post ID:
                        <input type="text" name="story.reddit_post_id" onchange="showRedditStory()" required>
                    </label></p>
                    <div id="redditStoryDiv" style="display: none;"></div>
                </div>
                <div id="redditRandomConfigs" style="display: none;">
                    <p><label style="display: block !important;">Reddit Random Subreddits:
                        <input type='text' placeholder='Subreddit Name' name='story.reddit_random_subreddits' style="margin-left: 0px !important; margin-right: 0px !important; margin-top: 0px !important; margin-bottom: 0px !important;">
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Random Posts Results Limit:
                        <input type="number" name="story.reddit_random_limit" min="1" value="50" step="1" required>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Random Post Minimum Comments:
                        <input type="number" name="story.reddit_random_min_comments" min="0" value="0" step="1" required>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Random Post Minimum Character Length:
                        <input type="number" name="story.reddit_random_min_length" min="0" value="30" step="1" required>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Random Post Maximum Character Length:
                        <input type="number" name="story.reddit_random_max_length" min="0" value="9007199254740991" step="1" required>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Reddit Random Post Allow NSFW:</label><label class="switch">
                        <input type="checkbox" name="story.reddit_random_allow_nsfw" />
                        <span class="slider round"></span>
                    </label></p>
                    <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit Random Post AI Similarity Keywords:
                        <input id="redditRandomStoryAISimilarityKeywords" type='text' placeholder='Similarity Keyword' name='story.reddit_random_ai_similarity' style="margin-left: 0px !important; margin-right: 0px !important; margin-top: 0px !important; margin-bottom: 0px !important;">
                    </label></p>
                </div>
                <p><label style="display: block !important;">Reddit Client ID:
                    <input type="text" name="story.reddit_client_id" required>
                </label></p>
                <p><label style="display: block !important;">Reddit Client Secret:
                    <input type="password" name="story.reddit_client_secret" required>
                </label></p>
                <p><label style="display: block !important;">Reddit Username:
                    <input type="text" name="story.reddit_username" onchange="toggleRedditUserPassOrToken()" required>
                </label></p>
                <p><label style="display: block !important;">Reddit Password:
                    <input type="password" name="story.reddit_password" onchange="toggleRedditUserPassOrToken()" required>
                </label></p>
                <p><label style="display: block !important;">Reddit Refresh Token:
                    <input type="password" name="story.reddit_refresh_token" onchange="toggleRedditUserPassOrToken()">
                </label></p>
                <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Reddit User Agent:
                    <input type="text" name="story.reddit_user_agent" value="nodejs-tiktok-video-maker" required>
                </label></p>
                <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">AI story reword:</label><label class="switch">
                    <input type="checkbox" name="story.ai_rewrite" onchange="toggleAIRewrite()"/>
                    <span class="slider round"></span>
                </label></p>
            </div>
            <!-- AI Rewrite need to show AI type -->
            <!-- AI type need to show AI specific configs for rewrites -->
            <!-- AI SOURCE need to show AI specific configs for creations -->
            <div id="aiSourceSection" style="display: none;">
                <p><label style="display: block !important;">AI Type:
                    <select name="story.ai_type">
                        <option value="openai" selected>Open AI</option>
                    </select>
                </label></p>
                <div id="openAISection">
                    <div id="openaiSharedConfigs">
                        <p><label style="display: block !important;">Open AI API Key:
                            <input type="password" name="story.openai_api_key" placeholder="sk-" old_required="true">
                        </label></p>
                        <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Open AI API Base:
                            <input type="text" name="story.openai_api_base" value="https://api.openai.com/v1" old_required="true">
                        </label></p>
                        <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Open AI Model:
                            <input type="text" name="story.openai_model" value="gpt-3.5-turbo-16k" old_required="true">
                        </label></p>
                        <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Open AI Retries:
                            <input type="number" name="story.openai_retries" min="0" max="100" value="5" step="1"  old_required="true">
                        </label></p>
                    </div>
                    <div id="openaiRewriteSection">
                        <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Fail if unable to rewrite the story:</label><label class="switch">
                            <input type="checkbox" name="story.openai_rewrite_retry_fail_on_error" checked />
                            <span class="slider round"></span>
                        </label></p>
                        <p class="advanced-options-step3" style="display:none;"><label style="display: block !important;">Rewrite Split Section Tokens:
                            <input type="number" name="story.openai_rewrite_chunk_max_tokens" min="25" value="1000" step="1"  old_required="true">
                        </label></p>
                        <p><label style="display: block !important;">Rewrite Length Percentage:
                            <input type="number" name="story.openai_rewrite_length" min="1" max="10000" value="100" step="1"  old_required="true">
                        </label></p>
                    </div>
                    <div id="openaiNewStorySection" style="display: none;">
                        <p><label style="display: block !important;">Open AI New Story Prompt:
                            <input type="text" name="story.openai_new_story_prompt" placeholder="Write a story about..."  old_required="true">
                        </label></p>
                        <p><label style="display: block !important;">Open AI New Story Minimum Length Characters:
                            <input type="number" name="story.openai_new_story_min_length" min="1" value="10" step="1"  old_required="true">
                        </label></p>
                    </div>
                </div>
            </div>
            <p>
                <button type="button" onclick="toggleAdvancedOptions(this, 'advanced-options-step3')">Show advanced options</button>
            </p>
            <button type="button" onclick="previousStep(2)">Previous</button>
            <button type="button" style="float: right;" onclick="nextStep(4)">Next</button>
        </div>

        <!-- Step 4 -->
        <div class="step" id="step4" style="display: none;">
            <h2>Story Replacements Config</h2>
            <h4>Text and Audio Replacements</h4>
            <button type="button" onclick="addReplacementInputs('text-and-audio')">Add Replacement</button>
            <div id="story-text-and-audio-replacements"></div>
            <div style="margin-bottom: 5px;">
                <button id="remove-story-text-and-audio-replacement" type="button" style="display: none;" onclick="removeReplacementInputs('text-and-audio')">Remove Replacement</button>
            </div>
            <h4>Text-Only Replacements</h4>
            <button type="button" onclick="addReplacementInputs('text-only')">Add Replacement</button>
            <div id="story-text-only-replacements"></div>
            <div style="margin-bottom: 5px;">
                <button id="remove-story-text-only-replacement" type="button" style="display: none;" onclick="removeReplacementInputs('text-only')">Remove Replacement</button>
            </div>
            <h4>Audio-Only Replacements</h4>
            <button type="button" onclick="addReplacementInputs('audio-only')">Add Replacement</button>
            <div id="story-audio-only-replacements"></div>
            <div style="margin-bottom: 5px;">
                <button id="remove-story-audio-only-replacement" type="button" style="display: none;" onclick="removeReplacementInputs('audio-only')">Remove Replacement</button>
            </div>
            <button type="button" onclick="previousStep(3)">Previous</button>
            <button type="button" style="float: right;" onclick="nextStep(5)">Next</button>
        </div>

        <!-- Step 5 -->
        <div class="step" id="step5" style="display: none;">
            <h2>Text to Speech Configs</h2>
            <p><label style="display: block !important;">TTS Source:
                <select name="tts.source" onchange="changeTTSSource()">
                    <option value="google-translate" selected>Google Translate</option>
                    <option value="tiktok">TikTok</option>
                    <option value="openai">OpenAI</option>
                </select>
            </label></p>
            <p id="ttsVoice" style="display: none;"><label style="display: block !important;">TTS Voice:
                <select name="tts.voice">
                </select>
            </label></p>
            <p id="ttsSample">
                <button type="button" onclick="playSampleTTS()">Play Sample</button>
            </p>
            <div id="tts-tiktok-source" style="display: none;">
                <p><label style="display: block !important;">TikTok Session ID:
                    <input type="password" name="tts.tiktok_session_id" old_required="true">
                </label></p>
            </div>
            <div id="tts-openai-source" style="display: none;">
                <p><label style="display: block !important;">Open AI API Key:
                    <input type="password" name="tts.openai_api_key" placeholder="sk-" old_required="true">
                </label></p>
                <p class="advanced-options-step5" style="display:none;"><label style="display: block !important;">Open AI API Base:
                    <input type="text" name="tts.openai_api_base" value="https://api.openai.com/v1" old_required="true">
                </label></p>
                <p class="advanced-options-step5" style="display:none;"><label style="display: block !important;">Open AI Model:
                    <input type="text" name="tts.openai_model" value="tts-1" old_required="true">
                </label></p>
                <p class="advanced-options-step5" style="display:none;"><label style="display: block !important;">OpenAI TTS Requests Per Minute:
                    <input type="number" name="tts.openai_tts_rpm" min="1" value="50" step="1" required>
                </label></p>
            </div>
            
            <p><label style="display: block !important;">TTS Speed Percentage:
                <input type="number" name="tts.speed" min="1" max="10000" value="100" step="1" required>
            </label></p>
            <p><label style="display: block !important;">TTS Volume Percentage:
                <input type="number" name="tts.volume" min="0" max="100" value="100" step="1" required>
            </label></p>
            <p class="advanced-options-step5" style="display:none;"><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Demux Concat:</label><label class="switch">
                <input type="checkbox" name="tts.demux_concat" checked />
                <span class="slider round"></span>
            </label></p>
            <p class="advanced-options-step5" style="display:none;"><label style="display: block !important;">TTS Extra Silence:
                <input type="number" name="tts.extra_silence" min="0" value="0.3" step="0.1" required>
            </label></p>
            <p>
                <button type="button" onclick="toggleAdvancedOptions(this, 'advanced-options-step5')">Show advanced options</button>
            </p>
            <button type="button" onclick="previousStep(4)">Previous</button>
            <button type="button" style="float: right;" onclick="nextStep(6)">Next</button>
        </div>

        <!-- Step 6 -->
        <div class="step" id="step6" style="display: none;">
            <h2>Caption Configs</h2>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Reddit Title Screenshot Theme:
                <select name="captions.nlp_splitter">
                    <option value="compromise" selected>compromise</option>
                    <option value="wink">wink</option>
                    <option value="natural">natural</option>
                </select>
            </label></p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Padding Height:
                <input type="number" name="captions.padding.height" min="0" value="200" step="1">
            </label></p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Padding Width:
                <input type="number" name="captions.padding.width" min="0" value="200" step="1">
            </label></p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Padding between lines:
                <input type="number" name="captions.padding.between_lines" min="0" value="10" step="1">
            </label></p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Caption Color:
                <div id="captions_color-picker" class="input-group advanced-options-step6" style="display: none;">
                    <input name="captions.color" type="text" value="rgb(255, 255, 255)" class="form-control input-lg" style="margin-top: 0;" required>
                    <span class="input-group-append">
                        <span class="input-group-text colorpicker-input-addon"><i></i></span>
                    </span>
                </div>
            </p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Caption Stroke Color:
                <div id="captions_stroke_color-picker" class="input-group advanced-options-step6" style="display: none;">
                    <input name="captions.stroke_color" type="text" value="rgb(0, 0, 0)" class="form-control input-lg" style="margin-top: 0;" required>
                    <span class="input-group-append">
                        <span class="input-group-text colorpicker-input-addon"><i></i></span>
                    </span>
                </div>
            </p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Background Color:
                <div id="captions_background_color-picker" class="input-group advanced-options-step6"  style="display: none;">
                    <input name="captions.background" type="text" value="rgba(0, 0, 0, 0)" class="form-control input-lg" style="margin-top: 0;" required>
                    <span class="input-group-append">
                        <span class="input-group-text colorpicker-input-addon"><i></i></span>
                    </span>
                </div>
            </p>
            <!-- Background Color Selector rgba -->
            <!-- Caption Color Selector rgba -->
            <!-- Stroke Color Selector rgba -->
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Stroke/outline width:
                <input type="number" name="captions.stroke_width" min="0" value="5" step="1">
            </label></p>
            <p><label style="display: block !important;">Font:
                <select id="font-suggestions" name="captions.font" onchange="updateCaptionsFontInput()">
                </select>
            </label></p>
            <p class="advanced-options-step6" style="display:none;"><label style="display: block !important;">Font size:
                <input type="number" name="captions.font_size" min="1" value="50" step="1">
            </label></p>
            <p>
                <div style="text-align:center;">
                    <img id="caption-sample" style="display: none; background: repeating-conic-gradient(rgb(191, 191, 191) 0%, rgb(191, 191, 191) 25%, transparent 0%, transparent 50%) 0% 0% / 11px 11px; max-height: 200vh; max-width: 75vw;">
                </div>
                <button type="button" onclick="renderSampleCaption()">Render Sample</button>
            </p>
            <p>
                <button type="button" onclick="toggleAdvancedOptions(this, 'advanced-options-step6')">Show advanced options</button>
            </p>
            <button type="button" onclick="previousStep(5)">Previous</button>
            <button type="button" style="float: right;" onclick="nextStep(7)">Next</button>
        </div>

        <!-- Step 7 -->
        <div class="step" id="step7" style="display: none;">
            <h2>Cleanup Configs</h2>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Delete Temporary Background Video Files:</label><label class="switch">
                <input type="checkbox" name="cleanup.background_video" checked />
                <span class="slider round"></span>
            </label></p>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Delete Temporary Background Audio Files:</label><label class="switch">
                <input type="checkbox" name="cleanup.background_audio" checked />
                <span class="slider round"></span>
            </label></p>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Delete Temporary Text to Speech Files:</label><label class="switch">
                <input type="checkbox" name="cleanup.tts" checked />
                <span class="slider round"></span>
            </label></p>
            <p><label style="vertical-align: text-top; height: 0; display: inline-block; margin-right: 5px;">Delete Temporary Caption Files:</label><label class="switch">
                <input type="checkbox" name="cleanup.captions" checked />
                <span class="slider round"></span>
            </label></p>
            <button type="button" onclick="previousStep(6)">Previous</button>
            <button type="button" style="float: right;" onclick="submitForm()">Submit</button>
        </div>
    </form>
</div>
<script>
    async function renderSampleCaption(){
        $('#caption-sample').slideUp('slow');
        const response = await fetch('/caption-sample', {
            method: 'POST',
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                video: {
                    width: +$('[name="video.width"]').val(),
                    height: +$('[name="video.height"]').val(),
                },
                captions: {
                    padding: {
                        height: +$('[name="captions.padding.height"]').val(),
                        between_lines: +$('[name="captions.padding.between_lines"]').val(),
                        width: +$('[name="captions.padding.width"]').val(),
                    },
                    background: $('[name="captions.background"]').val(),
                    color: $('[name="captions.color"]').val(),
                    stroke_color: $('[name="captions.stroke_color"]').val(),
                    stroke_width: +$('[name="captions.stroke_width"]').val(),
                    font: $('[name="captions.font"]').val(),
                    font_size: +$('[name="captions.font_size"]').val()
                }
            })
        })
        const json = await response.json();
        $('#caption-sample').attr('src', json.src);
        const minWorH = Math.min(+$('[name="video.width"]').val(), +$('[name="video.height"]').val());
        const transparentGridBackground = `repeating-conic-gradient(rgb(191, 191, 191) 0%, rgb(191, 191, 191) 25%, transparent 0%, transparent 50%) 0% 0% / ${Math.ceil(minWorH / 100)}px ${Math.ceil(minWorH / 100)}px`;
        $('#caption-sample').css('background', transparentGridBackground);
        $('#caption-sample').slideDown('slow');
    }
    var audio = null;
    function playSampleTTS(){
        const startSampleText = 'Play Sample';
        const stopSampleText = 'Stop Sample';
        const button = $('#ttsSample > button');
        if(audio && button.text() == stopSampleText){
            audio.pause();
            button.text(startSampleText);
        }else{
            const type = $('select[name="tts.source"]').val();
            const voice = $('select[name="tts.voice"]').val();
            const serverSideRenderedURL = `/tts-sample/${type}${voice ? ('/' + voice) : ''}.mp3?bitrate=${$('select[name="audio.bitrate"]').val()}&demux_concat=${$('input[name="tts.demux_concat"]').prop('checked')}`;
            const voiceSamples = {
                'google-translate': serverSideRenderedURL,
                openai: {
                    alloy: 'https://cdn.openai.com/API/docs/audio/alloy.wav',
                    echo: 'https://cdn.openai.com/API/docs/audio/echo.wav',
                    fable: 'https://cdn.openai.com/API/docs/audio/fable.wav',
                    onyx: 'https://cdn.openai.com/API/docs/audio/onyx.wav',
                    nova: 'https://cdn.openai.com/API/docs/audio/nova.wav',
                    shimmer: 'https://cdn.openai.com/API/docs/audio/shimmer.wav',
                },
                tiktok: {
                    [voice]: `${serverSideRenderedURL}&tiktok_session_id=${$('input[name="tts.tiktok_session_id"]').val()}`,
                }
            };
            const serviceSamples = voiceSamples[type];
            const chosenSample = serviceSamples && (serviceSamples[voice] || serviceSamples);
            if(!chosenSample){
                alert(`Sample for "${type}"${voice ? (' voice "' + voice + '"') : ''} does not exist yet.`)
            }else{
                audio = new Audio(chosenSample);
                button.text(stopSampleText);
                audio.play();
                audio.onended = function() {
                    button.text(startSampleText);
                };
            }
        }
    }
    async function showRedditStory(){
        $('#redditStoryDiv').slideUp('slow');
        const redditPostId = $('input[name="story.reddit_post_id"]').val();
        try {
            const redditResponse = await fetch(`/reddit?post_id=${redditPostId}`, {
                method: 'GET',
            });
            const fullURL = (await redditResponse.json()).url;
            console.log(fullURL);
            document.getElementById('redditStoryDiv').innerHTML = `
                <blockquote class="reddit-embed-bq" style="height:316px" data-embed-theme="dark" data-embed-height="8810">
                    <a href="${fullURL}"/>
                </blockquote>
            `;
            var head= document.getElementsByTagName('head')[0];
            var script= document.createElement('script');
            script.src= 'https://embed.reddit.com/widgets.js';
            head.appendChild(script);
            $('#redditStoryDiv').slideDown();
        }catch(err){
            $('#redditStoryDiv').slideUp('slow');
        }
    }
    function getYoutubeVideoID(url){
        let youtubeVideoID;
        if(url.includes('?v=') || url.includes('&v=')){
            // get
            youtubeVideoID = new URL(url).searchParams.get('v');
        } else if(url.includes('/v/')){
            youtubeVideoID = url.split('/v/').pop().split('/').shift().split('?').shift();
        } else if(url.includes('/e/')){
            youtubeVideoID = url.split('/e/').pop().split('/').shift().split('?').shift();
        } else if(url.includes('/embed/')){
            youtubeVideoID = url.split('/embed/').pop().split('/').shift().split('?').shift();
        } else if(url.includes('youtu.be/')){
            youtubeVideoID = url.split('youtu.be/').pop().split('/').shift().split('?').shift();
        } else if(url.includes('/attribution_link?')){
            const attributionLink = 'https://youtube.com/' + new URL(url).searchParams.get('u');
            youtubeVideoID = getYoutubeVideoID(attributionLink);
        }
        return youtubeVideoID;
    }
    function showBackgroundAudio(){
        const chosenURL = $('input[name="audio.url"]').val();
        const youtubeAudioID = getYoutubeVideoID(chosenURL);
        if(youtubeAudioID){
            document.getElementById('backgroundAudioDiv').innerHTML = `
            <iframe width="960" height="540" onload="$('#backgroundAudioDiv').slideDown('slow');" src="https://www.youtube.com/embed/${youtubeAudioID}?playlist=${youtubeAudioID}&loop=1">
            </iframe>
            `;
        }else{
            $('#backgroundAudioDiv').slideUp('slow');
        }
    }
    function showBackgroundVideo(){
        const chosenURL = $('input[name="video.url"]').val();
        const youtubeVideoID = getYoutubeVideoID(chosenURL);
        if(youtubeVideoID){
            document.getElementById('backgroundVideoDiv').innerHTML = `
            <iframe width="960" height="540" onload="$('#backgroundVideoDiv').slideDown('slow');" src="https://www.youtube.com/embed/${youtubeVideoID}?playlist=${youtubeVideoID}&loop=1">
            </iframe>
            `;
        }else{
            $('#backgroundVideoDiv').slideUp('slow');
        }
    }
    function resetForm(){
        localStorage.removeItem('config');
        window.location.reload();
    }
    const percentageFields = ['video.speed', 'video.volume', 'audio.speed', 'audio.volume', 'tts.speed', 'tts.volume', 'story.openai_rewrite_length'];
    const multiSelectFields = ['story.reddit_random_subreddits', 'story.reddit_random_ai_similarity']
    function loadConfig(){
        const serverConfig = {{{stringify config}}};
        const localConfig = flatten(JSON.parse(localStorage.getItem('config') || '{}'), { safe: true });
        const existingConfig = { ...serverConfig, ...localConfig };
        for(const [k,v] of Object.entries(existingConfig)){
            const input = $(`input[name="${k}"], select[name="${k}"]`);
            if(input.length > 0){
                if(percentageFields.includes(k)){
                    $(input).val(v * 100).change();
                } else if(multiSelectFields.includes(k)){
                    $(input).val(v.join(',')).change();
                } else if (input.attr('type') == 'checkbox' || input.prop('type') == 'checkbox'){
                    $(input).attr('checked', v).change();
                    $(input).prop('checked', v).change();
                }else{
                    $(input).val(v).change();
                }
            } else if(k.startsWith('replacements.')){
                const replacementType = k.split('replacements.').pop().split('.').shift();
                for(const [rt, wt] of v){
                    addReplacementInputs(replacementType);
                    const rtField = $(`input[name="replacements.${replacementType}.rt[]"]`).get().pop();
                    $(rtField).val(rt).change();
                    const wtField = $(`input[name="replacements.${replacementType}.wt[]"]`).get().pop();
                    $(wtField).val(wt).change();
                }
            }
        }
    }
    function ab2str(buf) {
        return String.fromCharCode.apply(null, new Uint16Array(buf));
    }
    async function submitForm(){
        const steps = $('.step-indicator').length;
        var formValid = true;
        for(var step = 1; step <= steps; step++){
            if(formValid){
                const stepResult = validateStep(step);
                if(!stepResult){ // if step is not valid
                    showStep(step); // show that step
                    validateStep(step); // refocus on issue input
                }
                formValid = stepResult;
            }
        }
        if(!formValid){
            return;
        }
        const formArraySerialized = $('form').serializeArray();
        const defaultSerialized = Object.fromEntries(formArraySerialized.map(e=>[e.name, e.value]));
        defaultSerialized['story.reddit_random_ai_similarity'] = defaultSerialized['story.reddit_random_ai_similarity'] ? defaultSerialized['story.reddit_random_ai_similarity'].split(',') : [];
        defaultSerialized['story.reddit_random_subreddits'] = defaultSerialized['story.reddit_random_subreddits'] ? defaultSerialized['story.reddit_random_subreddits'].split(',') : [];
        var textAndAudioReplacements = [];
        var textOnlyReplacements = [];
        var audioOnlyReplacements = [];
        var textAndAudio_rt = null;
        var textOnly_rt = null;
        var audioOnly_rt = null;
        for(const { name: k, value: v } of formArraySerialized){
            if(k.startsWith('flexdatalist-')){
                delete defaultSerialized[k];
            }
            if(k.startsWith('replacements.text-and-audio.rt')){
                textAndAudio_rt = v;
                delete defaultSerialized[k];
            }else if(k.startsWith('replacements.text-only.rt')){
                textOnly_rt = v;
                delete defaultSerialized[k];
            } else if(k.startsWith('replacements.audio-only.rt')){
                audioOnly_rt = v;
                delete defaultSerialized[k];
            } else{
                if(k.startsWith('replacements.text-and-audio.wt')){
                    textAndAudioReplacements.push([textAndAudio_rt, v]);
                    textAndAudio_rt = null;
                    delete defaultSerialized[k];
                }else if(k.startsWith('replacements.text-only.wt')){
                    textOnlyReplacements.push([textOnly_rt, v]);
                    textOnly_rt = null;
                    delete defaultSerialized[k];
                } else if(k.startsWith('replacements.audio-only.wt')){
                    audioOnlyReplacements.push([audioOnly_rt, v]);
                    audioOnly_rt = null;
                    delete defaultSerialized[k];
                }
            }
        }
        defaultSerialized['replacements.text-and-audio'] = textAndAudioReplacements;
        defaultSerialized['replacements.text-only'] = textOnlyReplacements;
        defaultSerialized['replacements.audio-only'] = audioOnlyReplacements;
        const formCheckboxes = [...$('form').find('input[type="checkbox"]')];
        for(const formCheckbox of formCheckboxes){
            defaultSerialized[formCheckbox.name] = formCheckbox.checked;
        }
        const numberInputs = [...$('form').find('input[type="number"]'), ...$('select[name="audio.bitrate"]')];
        for(const numberInput of numberInputs){
            defaultSerialized[numberInput.name] = +numberInput.value;
        }
        for(const percentageField of percentageFields){
            defaultSerialized[percentageField] = defaultSerialized[percentageField] / 100;
        }
        const finalConfig = {};
        for(const [k,v] of Object.entries(defaultSerialized)){
            _.set(finalConfig, k, v);
        }
        console.log(finalConfig);
        localStorage.setItem('config', JSON.stringify(finalConfig));
        $([...$('.form-container').children()].filter(e=>e.id != 'terminal')).hide();
        const term = new Terminal({ disableStdIn: true });
        const fitAddon = new FitAddon.FitAddon();
        const weblinksAddon = new WebLinksAddon.WebLinksAddon(function(event, url) {
            if(url == 'retry://'){
                term.dispose();
                submitForm();
            } else if(url == 'edit://'){
                term.dispose();
                $([...$('.form-container').children()].filter(e=>e.id != 'terminal')).show();
                $('#terminal').hide();
            }else if (url.startsWith('download://')){
                window.open(`/download/${url.split('://').pop().replace(/^\/|\/$/,'')}`, '_blank')
            }else if (url.startsWith('view://')){
                window.open(`/view/${url.split('://').pop().replace(/^\/|\/$/,'')}`, '_blank')
            }else{
                window.open(url, '_blank');
            }
        }, {
            urlRegex: /((retry|edit):[/]{2})|(((https?)|download|view):[/]{2}[^\s"'!*(){}|\\\^<>`]*[^\s"':,.!?{}|\\\^~\[\]`()<>])/
        });
        term.loadAddon(fitAddon);
        term.loadAddon(weblinksAddon);
        $('#terminal').show();
        term.open(document.getElementById('terminal'));
        fitAddon.fit();
        weblinksAddon.activate(term);
        addEventListener("resize", () => fitAddon.fit());
        const response = await fetch(`/generate?rows=${term.rows}&cols=${term.cols}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(finalConfig)
        });
        const requestID = response.headers.get('id') || Date.now();
        term.attachCustomKeyEventHandler((e) => {
            if(e.type == 'keydown' && e.ctrlKey && e.key == 'c'){
                fetch(`/cancel?id=${requestID}`);
                term.write('^C');
            }
        });
        try{
            const reader = response.body.getReader();
            while (true) {
                const { done, value } = await reader.read();
                if (done) {
                // Do something with last chunk of data then exit reader
                    break;
                }
                // Otherwise do something here to process current chunk
                if(value && ab2str(value) != 'heartbeat' && value.toString() != 'heartbeat'){
                    term.write(value);
                }
            }
        }catch(err){
            lastWrite = null;
            console.error(err);
            term.write('\r\nGot error while generating: ' + err.message);
        }
        term.write('\r\nClick here to retry://');
        term.write('\r\nClick here to edit://');
        term.write('\r\n');
        console.log('Request ended!');
    }
    function addReplacementInputs(replacementType){
        const removeButtonID = `remove-story-${replacementType}-replacement`;
        const divToUpdateID = `story-${replacementType}-replacements`;
        const newdiv = document.createElement( "div" );
        newdiv.style = "border: 1px solid black; margin: 5px; padding: 15px; border-radius: 25px;";
        const replaceThisLabel = document.createElement( "label" );
        replaceThisLabel.textContent = 'Replace this:';
        newdiv.appendChild(replaceThisLabel);
        const replaceThisInput = document.createElement( "input" );
        replaceThisInput.name = 'replacements.' + replacementType + '.rt[]'
        replaceThisInput.type = 'text';
        replaceThisInput.required = true;
        newdiv.appendChild(replaceThisInput);
        const replaceWithThisLabel = document.createElement( "label" );
        replaceWithThisLabel.textContent = 'With this:';
        newdiv.appendChild(replaceWithThisLabel);
        const replaceWithThisInput = document.createElement( "input" );
        replaceWithThisInput.name = 'replacements.' + replacementType + '.wt[]'
        replaceWithThisInput.type = 'text';
        replaceWithThisInput.required = true;
        newdiv.appendChild(replaceWithThisInput);
        $("#" + divToUpdateID).append(newdiv);
        $('#' + removeButtonID).show();
    }
    function removeReplacementInputs(replacementType){
        const removeButtonID = `remove-story-${replacementType}-replacement`;
        const divToUpdateID = `story-${replacementType}-replacements`;
        const divToUpdateInputs = [...document.getElementById(divToUpdateID).querySelectorAll('div')];
        $(divToUpdateInputs.slice(-1)).remove();
        if(divToUpdateInputs.length <= 1){
            $('#' + removeButtonID).hide();
        }
    }
    function updateCaptionsFontInput(){
        const captionsFontInput = $('select[name="captions.font"]');
        captionsFontInput.css('font-family', captionsFontInput.val());
    }
    function disableRequired(input){
        const oldRequiredProp = $(input).prop('required');
        const oldRequiredAttr = $(input).attr('required');
        const oldRequired = oldRequiredProp || oldRequiredAttr;
        if(![null, undefined].includes(oldRequired)){
            $(input).prop('old_required', oldRequired)
        }
        $(input).attr('required', false)
        $(input).prop('required', false)
    }
    function enableRequired(input){
        const oldRequiredProp = $(input).prop('old_required');
        const oldRequiredAttr = $(input).attr('old_required');
        const oldRequired = oldRequiredProp || oldRequiredAttr;
        const currentRequiredProp = $(input).prop('required');
        const currentRequiredAttr = $(input).prop('required');
        const currentRequired = currentRequiredProp || currentRequiredAttr;
        $(input).attr('required', oldRequired || currentRequired);
        $(input).prop('required', oldRequired || currentRequired);
    }
    function changeTTSSource(){
        const selectedSource = $('select[name="tts.source"]').val();
        $('#tts-tiktok-source').hide();
        [...document.getElementById('tts-tiktok-source').getElementsByTagName('input')].forEach(function(input){
            disableRequired(input);
        });
        $('#tts-openai-source').hide();
        [...document.getElementById('tts-openai-source').getElementsByTagName('input')].forEach(function(input){
            disableRequired(input);
        });
        $('select[name="tts.voice"]').find('option').remove();
        $('select[name="tts.voice"]').find('optgroup').remove();
        if(selectedSource == 'tiktok'){
            const allVoices = {{{stringify voices}}};
            const tiktokVoices = allVoices.tiktok;
            const { disneyVoices, engVoices, nonEngVoices, vocals } = tiktokVoices;
            const defaultVoice = 'en_male_narration';
            const voiceNameMap = {
                "es_mx_male_transformer": "Optimus Prime (Transformers)",
                "en_us_ghostface": "Ghostface (Scream)",
                "en_us_chewbacca": "Chewbacca (Star Wars)",
                "en_us_c3po": "C3PO (Star Wars)",
                "en_us_stitch": "Stitch (Lilo & Stitch)",
                "en_us_stormtrooper": "Stormtrooper (Star Wars)",
                "en_us_rocket": "Rocket (Guardians of the Galaxy)",
                "en_female_f08_salut_damour": "Alto",
                "en_male_m03_lobby": "Tenor",
                "en_male_m03_sunshine_soon": "Sunshine Soon",
                "en_female_f08_warmy_breeze": "Warmy Breeze",
                "en_female_ht_f08_glorious": "Glorious",
                "en_male_sing_funny_it_goes_up": "It Goes Up",
                "en_male_m2_xhxs_m03_silly": "Chipmunk",
                "en_female_ht_f08_wonderful_world": "Dramatic"
            };
            const disneyOptions = disneyVoices.map(voice => `<option ${voice == defaultVoice ? 'selected ' : ''}value="${voice}">${voiceNameMap[voice] || voice}</option>`)
            const engVoiceOptions = engVoices.map(voice => `<option ${voice == defaultVoice ? 'selected ' : ''}value="${voice}">${voiceNameMap[voice] || voice}</option>`)
            const nonEngVoiceOptions = nonEngVoices.map(voice => `<option ${voice == defaultVoice ? 'selected ' : ''}value="${voice}">${voiceNameMap[voice] || voice}</option>`)
            const vocalOptions = vocals.map(voice => `<option ${voice == defaultVoice ? 'selected ' : ''}value="${voice}">${voiceNameMap[voice] || voice}</option>`)
            $('select[name="tts.voice"]').append(`<optgroup label="Disney Voices">${disneyOptions}</optgroup>`);
            $('select[name="tts.voice"]').append(`<optgroup label="English Voices">${engVoiceOptions}</optgroup>`);
            $('select[name="tts.voice"]').append(`<optgroup label="Non-English Voices">${nonEngVoiceOptions}</optgroup>`);
            $('select[name="tts.voice"]').append(`<optgroup label="Vocals">${vocalOptions}</optgroup>`);
            $('#ttsVoice').show();
            [...document.getElementById('tts-tiktok-source').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            $('#tts-tiktok-source').show();
        }else if(selectedSource == 'openai'){
            const allVoices = {{{stringify voices}}};
            const openaiVoices = allVoices.openai;
            const defaultVoice = 'alloy';
            for(const voice of openaiVoices){
                $('select[name="tts.voice"]').append(`<option ${voice == defaultVoice ? 'selected' : ''}value="${voice}">${voice}</option>`);
            }
            $('#ttsVoice').show();
            [...document.getElementById('tts-openai-source').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            $('#tts-openai-source').show();
        }else if(selectedSource == 'google-translate'){
            $('#ttsVoice').hide();
        }
    }
    var oldSSTitleState = true;
    function toggleAIRewrite(){
        if($('input[name="story.ai_rewrite"]').prop('checked')){
            oldSSTitleState = $('input[name="story.reddit_screenshot_title"]').prop('checked');
            $('input[name="story.reddit_screenshot_title"]').prop('checked', false);
            [...document.getElementById('openaiSharedConfigs').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            [...document.getElementById('openaiRewriteSection').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            $('#openAISection').show();
            $('#openaiRewriteSection').show();
            $('#openaiNewStorySection').hide();
            $('#aiSourceSection').slideDown('slow');
        }else{
            $('input[name="story.reddit_screenshot_title"]').prop('checked', oldSSTitleState);
            [...document.getElementById('openaiSharedConfigs').getElementsByTagName('input')].forEach(function(input){
                disableRequired(input);
            });
            [...document.getElementById('openaiRewriteSection').getElementsByTagName('input')].forEach(function(input){
                disableRequired(input);
            });
            $('#aiSourceSection').slideUp('slow');
            $('#openaiNewStorySection').show();
            $('#openaiRewriteSection').hide();
            $('#openAISection').hide();
        }
    }
    function toggleRedditUserPassOrToken(){
        const screenshotOn = $('input[name="story.reddit_screenshot_title"]').prop('checked');
        const userSet = $('input[name="story.reddit_username"]').val().length > 0;
        const passwordSet = $('input[name="story.reddit_password"]').val().length > 0;
        const tokenSet = $('input[name="story.reddit_refresh_token"]').val().length > 0;
        // Set default state, because user/pass is easier than refresh token
        $('input[name="story.reddit_refresh_token"]').prop('required', false);
        $('input[name="story.reddit_username"]').prop('required', true);
        $('input[name="story.reddit_password"]').prop('required', true);
        if(!screenshotOn){
            if(tokenSet){
                $('input[name="story.reddit_username"]').prop('required', false);
                $('input[name="story.reddit_password"]').prop('required', false);
                $('input[name="story.reddit_refresh_token"]').prop('required', true);
                $('input[name="story.reddit_username"]').removeClass('orange-border');
                $('input[name="story.reddit_password"]').removeClass('orange-border');
                $('input[name="story.reddit_refresh_token"]').removeClass('orange-border');
            } else if(!userSet && !passwordSet){
                $('input[name="story.reddit_username"]').addClass('orange-border');
                $('input[name="story.reddit_password"]').addClass('orange-border');
                $('input[name="story.reddit_refresh_token"]').addClass('orange-border');
            }else{
                $('input[name="story.reddit_username"]').removeClass('orange-border');
                $('input[name="story.reddit_password"]').removeClass('orange-border');
                $('input[name="story.reddit_refresh_token"]').removeClass('orange-border');
            }
        }else{
            $('input[name="story.reddit_username"]').removeClass('orange-border');
            $('input[name="story.reddit_password"]').removeClass('orange-border');
            $('input[name="story.reddit_refresh_token"]').removeClass('orange-border');
        }
    }
    function toggleRedditRandomConfigs(checkboxElement){
        if(checkboxElement.checked){
            $('input[name="story.reddit_post_id"]').prop('required', false);
            $('input[name="story.reddit_random_subreddits"]').prop('required', true);
            // $('input[name="story.reddit_random_subreddits"]').next().find('input').prop('required', true);
            $('#redditNotRandomConfigs').slideUp("slow");
            $('#redditRandomConfigs').slideDown("slow");
        }else{
            $('input[name="story.reddit_post_id"]').prop('required', true);
            $('input[name="story.reddit_random_subreddits"]').prop('required', false);
            // $('input[name="story.reddit_random_subreddits"]').next().find('input').prop('required', false);
            $('#redditRandomConfigs').slideUp("slow");
            $('#redditNotRandomConfigs').slideDown("slow");
        }
    }
    function toggleRedditScreenshotConfigs(checkboxElement){
        if(checkboxElement.checked){
            $('#redditScreenshotConfigs').slideDown("slow");
        }else{
            $('#redditScreenshotConfigs').slideUp("slow");
        }
        toggleRedditUserPassOrToken()
    }
    function editAudioBitrate(checkboxElement){
        if(checkboxElement.checked){
            if($("#audioBitrate").val() == '320'){
                $("#audioBitrate").val('256');
            }
            $("#audioBitrate option[value=320]").hide();
        }else{
            if($("#audioBitrate").val() == '256'){
                $("#audioBitrate").val('320');
            }
            $("#audioBitrate option[value=320]").show();
        }
    }
    function toggleAdvancedOptions(buttonElement, advancedOptionsDivClass){
        const show = buttonElement.outerText.startsWith('Show');
        if(show){
            $(buttonElement).html('Hide advanced options');
            $('.' + advancedOptionsDivClass).slideDown("slow");
        }else{
            $(buttonElement).html('Show advanced options');
            $('.' + advancedOptionsDivClass).slideUp("slow");
        }
    }
    function showStorySourceSection(storySourceElement){
        if($(storySourceElement).val() == 'ai'){
            // disable reddit section required
            [...document.getElementById('redditSourceSection').getElementsByTagName('input')].forEach(function(input){
                disableRequired(input);
            });
            // disable ai rewrite section required
            [...document.getElementById('openaiRewriteSection').getElementsByTagName('input')].forEach(function(input){
                disableRequired(input);
            });
            // enable shared ai section required
            [...document.getElementById('openaiSharedConfigs').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            // enable new story section required
            [...document.getElementById('openaiNewStorySection').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            $('#redditSourceSection').slideUp("slow");
            $('#openaiRewriteSection').hide();
            $('#openaiNewStorySection').show();
            $('#aiSourceSection').slideDown("slow");
        }else{
            // disable ai new story section required
            [...document.getElementById('openaiNewStorySection').getElementsByTagName('input')].forEach(function(input){
                disableRequired(input);
            });
            // enable reddit section required
            [...document.getElementById('redditSourceSection').getElementsByTagName('input')].forEach(function(input){
                enableRequired(input);
            });
            const aiInputs = [...document.getElementById('aiSourceSection').getElementsByTagName('input')];
            for(const aiInput of aiInputs){
                disableRequired(aiInput);
            }
            const redditInputs = [...document.getElementById('redditSourceSection').getElementsByTagName('input')];
            for(const redditInput of redditInputs){
                enableRequired(redditInput);
            }
            $('#aiSourceSection').slideUp("slow");
            $('#openaiRewriteSection').show();
            $('#openaiNewStorySection').hide();
            toggleAIRewrite();
            $('#redditSourceSection').slideDown("slow");
        }
    }
    function toggleResizeMethodDependsOn(){
        const showCrop = $('select[name="video.resize_method"]').val() == 'crop';
        if(showCrop){
            $('.depends-on-scale').hide();
            $('.depends-on-crop').show();
        }else{
            $('.depends-on-crop').hide();
            $('.depends-on-scale').show();
        }
    }
    function validateStep(stepId) {
        var inputs = [...document.querySelectorAll('#step' + stepId + ' input')];
        var retVal = true;
        var focusInput = null;
        for(const input of inputs){
            const inputValid = input && input.checkValidity();
            retVal = retVal && inputValid;
            if(!inputValid){
                console.log("Input not valid:", input);
                focusInput = focusInput || input;
            }
        }
        if(focusInput && focusInput.classList.contains('flexdatalist')){
            focusInput=$(focusInput).next().find('input')
        }
        if(focusInput && stepId == currentStep){
            $(focusInput).focus();
        }
        if(retVal){
            document.getElementById('indicator' + stepId).classList.add('valid');
            document.getElementById('indicator' + stepId).classList.remove('invalid');
        }else{
            document.getElementById('indicator' + stepId).classList.add('invalid');
            document.getElementById('indicator' + stepId).classList.remove('valid');
        }
        return retVal;
    }
    var currentStep = 1;
    function nextStep(stepId) {
        if (validateStep(stepId - 1)) {
            showStep(stepId);
        }
    }
    function previousStep(stepId) {
        showStep(stepId);
    }
    function showStep(stepId) {
        var steps = document.getElementsByClassName('step');
        for (var i = 0; i < steps.length; i++) {
            steps[i].style.display = 'none';
        }
        document.getElementById('step' + stepId).style.display = 'block';

        updateStepIndicator(stepId);
        currentStep = stepId;
    }
    function updateStepIndicator(stepId) {
        var indicators = document.getElementsByClassName('step-indicator');
        for (var i = 0; i < indicators.length; i++) {
            indicators[i].classList.remove('active');
            // Update the color based on validation status
            if (i < stepId - 1 || i == currentStep - 1) {
                indicators[i].classList.add(validateStep(i + 1) ? 'valid' : 'invalid');
            }
        }
        document.getElementById('indicator' + stepId).classList.add('active');
    }
    function setupStepIndicatorClicks() {
        var indicators = document.getElementsByClassName('step-indicator');
        for (var i = 0; i < indicators.length; i++) {
            (function (index) {
                indicators[i].addEventListener('click', function () {
                    validateStep(index + 1)
                    showStep(index + 1);
                });
            })(i);
        }
    }
    $(document).ready(async () => {
        // const fontCheck = new Set([
        //     // Windows 10
        //     'Arial', 'Arial Black', 'Bahnschrift', 'Calibri', 'Cambria', 'Cambria Math', 'Candara', 'Comic Sans MS', 'Consolas', 'Constantia', 'Corbel', 'Courier New', 'Ebrima', 'Franklin Gothic Medium', 'Gabriola', 'Gadugi', 'Georgia', 'HoloLens MDL2 Assets', 'Impact', 'Ink Free', 'Javanese Text', 'Leelawadee UI', 'Lucida Console', 'Lucida Sans Unicode', 'Malgun Gothic', 'Marlett', 'Microsoft Himalaya', 'Microsoft JhengHei', 'Microsoft New Tai Lue', 'Microsoft PhagsPa', 'Microsoft Sans Serif', 'Microsoft Tai Le', 'Microsoft YaHei', 'Microsoft Yi Baiti', 'MingLiU-ExtB', 'Mongolian Baiti', 'MS Gothic', 'MV Boli', 'Myanmar Text', 'Nirmala UI', 'Palatino Linotype', 'Segoe MDL2 Assets', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Segoe UI Historic', 'Segoe UI Emoji', 'Segoe UI Symbol', 'SimSun', 'Sitka', 'Sylfaen', 'Symbol', 'Tahoma', 'Times New Roman', 'Trebuchet MS', 'Verdana', 'Webdings', 'Wingdings', 'Yu Gothic',
        //     // macOS
        //     'American Typewriter', 'Andale Mono', 'Arial', 'Arial Black', 'Arial Narrow', 'Arial Rounded MT Bold', 'Arial Unicode MS', 'Avenir', 'Avenir Next', 'Avenir Next Condensed', 'Baskerville', 'Big Caslon', 'Bodoni 72', 'Bodoni 72 Oldstyle', 'Bodoni 72 Smallcaps', 'Bradley Hand', 'Brush Script MT', 'Chalkboard', 'Chalkboard SE', 'Chalkduster', 'Charter', 'Cochin', 'Comic Sans MS', 'Copperplate', 'Courier', 'Courier New', 'Didot', 'DIN Alternate', 'DIN Condensed', 'Futura', 'Geneva', 'Georgia', 'Gill Sans', 'Helvetica', 'Helvetica Neue', 'Herculanum', 'Hoefler Text', 'Impact', 'Lucida Grande', 'Luminari', 'Marker Felt', 'Menlo', 'Microsoft Sans Serif', 'Monaco', 'Noteworthy', 'Optima', 'Palatino', 'Papyrus', 'Phosphate', 'Rockwell', 'Savoye LET', 'SignPainter', 'Skia', 'Snell Roundhand', 'Tahoma', 'Times', 'Times New Roman', 'Trattatello', 'Trebuchet MS', 'Verdana', 'Zapfino',
        // ].sort());
        // await document.fonts.ready;
        const allFonts = {{{stringify fonts}}};
        // for (const font of fontCheck.values()) {
        //     if (!allFonts.includes(font) && document.fonts.check(`12px "${font}"`)) {
        //         allFonts.push(font);
        //     }
        // }
        allFonts.sort();
        for(const font of allFonts){
            $("#font-suggestions").append($('<option>', { value: font, text: font, style: 'font-family: ' + font }));
        }
        $('#font-suggestions').val('Roboto-Regular');
        updateCaptionsFontInput();

        $('#scale_pad_color-picker').colorpicker({
            format: "hex",
            useAlpha: false
        });
        $('#scale_pad_color-picker > input').on('focus', function(){
            $('#scale_pad_color-picker').colorpicker('show');
        });
        $('#captions_background_color-picker').colorpicker({
            useAlpha: true
        });
        $('#captions_background_color-picker > input').on('focus', function(){
            $('#captions_background_color-picker').colorpicker('show');
        });
        $('#captions_color-picker').colorpicker({
            useAlpha: true
        });
        $('#captions_color-picker > input').on('focus', function(){
            $('#captions_color-picker').colorpicker('show');
        });
        $('#captions_stroke_color-picker').colorpicker({
            useAlpha: true
        });
        $('#captions_stroke_color-picker > input').on('focus', function(){
            $('#captions_stroke_color-picker').colorpicker('show');
        });
        $('input[name="story.reddit_random_subreddits"]').flexdatalist({
            data: [],
            searchDisabled: true,
            searchDelay: 0,
            minLength: 1,
            selectionRequired: false,
            noResultsText: 'Press enter to add "{keyword}"',
            multiple: true,
            toggleSelected: true,
        });
        $('input[name="story.reddit_random_subreddits"]').click(function(event){
            $(event.target.nextElementSibling).find('input').click()
        });
        $('input[name="story.reddit_random_ai_similarity"]').flexdatalist({
            data: [],
            searchDisabled: true,
            searchDelay: 0,
            minLength: 1,
            selectionRequired: false,
            noResultsText: 'Press enter to add "{keyword}"',
            multiple: true,
            toggleSelected: true,
        });
        $('input[name="story.reddit_random_ai_similarity"]').click(function(event){
            $(event.target.nextElementSibling).find('input').click()
        });
        loadConfig();
        setupStepIndicatorClicks();
        showStep(1);
    });
</script>